// Run in webppl directory:
// ./webppl --require ../webppl-fs/ --require ../webppl-nn/ ../neural-nets/models/sequence-encoder-decoder-babi.wppl


// --------------------------------------------------------------------
// Helpers

var second = function(x) { return x[1]; };

var reduceLeft = function(f, init, arr) {
  // if (arr.length > 0) {
  //   return reduceLeft(f, f(init, arr[0]), rest(arr));
  // } else {
  //   return init;
  // }
  var helper = function(i, init) {
    if (i < arr.length) {
      return helper(i + 1, f(init, arr[i]));
    } else {
      return init;
    }
  };
  return helper(0, init);
};


var observe = function(dist, val) {
  if (val !== undefined) {
    factor(dist.score(val));
    return val;
  } else {
    return sample(dist, {
      guide() {
        return dist; // prevent auto-guide in Forward; always use model dist
      }
    });
  }
};


_.defaults(global, { webpplCache: {} });

var globalCache = global.webpplCache;

var cached = function(fn) {
  return function(x) {
    if (_.has(globalCache, x)) {
      return globalCache[x];
    } else {
      var value = fn(x);
      _.assign(globalCache, _.zipObject([x], [value]));
      return value;
    }
  }
};


var addEndMarker = function(words) {
  return words.concat(['$']);
};

var removeEndMarker = function(words) {
  if ((words.length === 0) || (words[words.length - 1] !== '$')) {
    return words;
  }
  return words.slice(0, words.length - 1);
};


var wordsToString = function(words) {
  return removeEndMarker(words).join(' ');
};

var stringToWords = function(s) {
  return addEndMarker(s.split(' '));
};


// --------------------------------------------------------------------
// Load babi dialog task 1 data

var parseLine = function(rawLine) {
  var i = rawLine.indexOf(' ');  // Remove line index
  var line = rawLine.slice(i + 1);
  var utterances = line.split('\t');
  assert.equal(utterances.length, 2);
  return utterances;
}

var parseDialog = function(rawDialog) {
  var rawLines = rawDialog.split('\n');
  return map(parseLine, rawLines);
};

var load = function(fn) {
  var raw = fs.read(fn).trim();
  return map(parseDialog, raw.split('\n\n'));
}

var trainingData = load('/data/neural-nets/data/dialog-babi-task1/dialog-babi-task1-API-calls-trn.txt');

var devData = load('/data/neural-nets/data/dialog-babi-task1/dialog-babi-task1-API-calls-dev.txt').slice(0, 10);

// Note: I'm telling the model about the possible words in the dev data as well!
var words = _.sortBy(_.uniq(_.flatten(map(stringToWords, _.flattenDeep(_.concat(trainingData, devData)))).concat(['^', '$'])));


// --------------------------------------------------------------------
// Encoder + decoder

var latentDim = 30;

var onehotWords = cached(function(word) {
  var i = _.indexOf(words, word);
  assert.ok(i != -1, "onehot expected to find word in words, didn't find " + word + " in " + words);
  var n = words.length;
  return oneHot(i, n);
});

var makeModelParam = param;  // no regularization

var makeEncoderStep = function() {
  var encoderNet = lstm(latentDim, 'encoder-net', makeModelParam);
  return function(prevState, word) {
    assert.ok(dims(prevState)[0] === latentDim, 'Previous hidden vector has unexpected dimension');
    var nextState = encoderNet(prevState, onehotWords(word));
    return nextState;
  };
};

var makeInitialEncoderState = function() {
  return makeModelParam({ name: 'encoder-init', dims: [latentDim, 1] });
};

// Encoder repeats encoder step until input is completely digested
var makeEncoder = function() {
  var encoderStep = makeEncoderStep();
  var encoder = function(words, maybeState) {    
    var state = maybeState || makeInitialEncoderState();
    if (words.length === 0) {
      return state;
    } else {
      var nextState = encoderStep(state, words[0]);
      return encoder(words.slice(1), nextState);
    }
  };
  return encoder;
};

var makeDecoderStep = function() {
  var decoderNetLatent = lstm(latentDim, 'decoder-net-latent', makeModelParam);
  var decoderNetOutput = stack([softmax, affine(words.length, 'decoder-net-output', makeModelParam), concat]);
  return function(prevWord, state) {
    assert.ok(dims(state)[0] === latentDim, 'Previous hidden vector has unexpected dimension');
    var wordVec = onehotWords(prevWord);
    var nextState = decoderNetLatent(state, wordVec);
    var ps = decoderNetOutput([nextState, wordVec]);
    return { ps, state: nextState }
  };
};

// Decoder repeats decoder step until terminal symbol is observed or max length is exceeded
var makeDecoder = function(maxWords) {
  var decoderStep = makeDecoderStep();
  var decoder = function(opts) {
    var state = opts.state;
    var n = opts.n || 0;
    var generatedWords = opts.generatedWords || ['^'];
    var observedWords = opts.observedWords;
    var prevWord = _.last(generatedWords);
    if ((n === (maxWords + 2)) || (prevWord === '$')) {
      // We're not slicing off the terminal symbol since not all strings self-terminate,
      // and we might like to know which do
      return generatedWords.slice(1);
    } else {
      var tmp = decoderStep(prevWord, state);
      var nextState = tmp.state;
      var ps = tmp.ps;
      var observedWord = observedWords ? observedWords[0] : undefined;
      var generatedWord = observe(Categorical({ ps, vs: words }), observedWord);
      return decoder({
        state: nextState,
        n: n+1,
        generatedWords: generatedWords.concat([generatedWord]),
        observedWords: observedWords ? observedWords.slice(1) : undefined
      });
    }
  };
  return decoder;
};


// --------------------------------------------------------------------
// Main

var encoder = makeEncoder();

var decoder = makeDecoder(10);


var runModel = function(options) { // data, withObservations, callback, batchSize

  var initialEncoderState = makeInitialEncoderState();
  mapData({ data: options.data, batchSize: options.batchSize }, function(datum) {
    
    reduceLeft(function (prevState, exchange) {
      var utterance = stringToWords(exchange[0]);
      var midState = encoder(utterance, prevState);
      var trueResponse = stringToWords(exchange[1]);
      var modelResponse = decoder({
        state: midState,
        observedWords: options.withObservations ? trueResponse : undefined
      });
      if (options.callbackOnExchange) {
        var callback = options.callbackOnExchange;
        callback(utterance, trueResponse, modelResponse);
      }
      var state = encoder(trueResponse, midState);
      return state;
    }, initialEncoderState, datum);

    if (options.callbackOnDialog) {
      var callback = options.callbackOnDialog;
      callback();
    }
  });
};


Optimize({
  model() {
    return runModel({
      data: trainingData,
      withObservations: true,
      batchSize: 20
    });
  },
  steps: 300,
  optMethod: { adam: { stepSize: .01 }}
});


runModel({
  data: devData,
  callbackOnExchange(utterance, trueResponse, modelResponse) {
    var log = function(label, words) { console.log(label + ': ', wordsToString(words)); }
    log('Input', utterance);
    log('True response', trueResponse);
    log('Model response', modelResponse);
    console.log()
  },
  callbackOnDialog() {
    console.log('--------------------------------------------------------------------');
  }
})

'done'


// Output (with training, on dev set):
// 
// Input:  hello
// True response:  hello what can i help you with today
// Model response:  hello what can i help you with today
// 
// Input:  can you book a table for six people with french food
// True response:  i'm on it
// Model response:  i'm on it
// 
// Input:  <SILENCE>
// True response:  where should it be
// Model response:  where should it be
// 
// Input:  in bombay
// True response:  which price range are looking for
// Model response:  which price range are looking for
// 
// Input:  i am looking for a cheap restaurant
// True response:  ok let me look into some options for you
// Model response:  ok let me look into some options for you
// 
// Input:  <SILENCE>
// True response:  api_call french bombay six cheap
// Model response:  api_call french bombay madrid two cheap
// 
// --------------------------------------------------------------------
// Input:  hi
// True response:  hello what can i help you with today
// Model response:  hello what can i help you with today
// 
// Input:  can you make a restaurant reservation with italian cuisine for six people in a cheap price range
// True response:  i'm on it
// Model response:  i'm on it
// 
// Input:  <SILENCE>
// True response:  where should it be
// Model response:  any preference on a type of cuisine
// 
// Input:  rome please
// True response:  ok let me look into some options for you
// Model response:  ok let me look into some options for you
// 
// Input:  <SILENCE>
// True response:  api_call italian rome six cheap
// Model response:  api_call spanish paris eight cheap


// ====================================================================

// WITHOUT training:
// 
// Input:  hello
// True response:  hello what can i help you with today
// Model response:  some italian love six party options eight hi please i should morning
// 
// Input:  can you book a table for six people with french food
// True response:  i'm on it
// Model response:  food some be four help like two four a will book food
// 
// Input:  <SILENCE>
// True response:  where should it be
// Model response:  ^ with british six table your spanish be ok london looking am
// 
// Input:  in bombay
// True response:  which price range are looking for
// Model response:  cuisine some many make should many it people cuisine what with four
// 
// Input:  i am looking for a cheap restaurant
// True response:  ok let me look into some options for you
// Model response:  you italian table help can range for moderate cuisine for preference party
// 
// Input:  <SILENCE>
// True response:  api_call french bombay six cheap
// Model response:  your have ok people reservation options ^ like am rome into cuisine